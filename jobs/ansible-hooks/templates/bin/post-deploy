#!/usr/bin/env bash
#
# The purpose of this script is run ansible playbooks from others jobs.
# Playbooks from other jobs will be ordered by lexical order
# from a predefined basic pattern like "*drain.yml", for example:
# jobs/zz/ansible/00-drain.yml, jobs/bb/ansible/10-drain.yml. jobs/aa/ansible/99-drain.yml

# set -e  # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Load job properties
source /var/vcap/jobs/ansible-hooks/data/properties.sh

if [ "$JOB_XBOOTSTRAP" == "1" ]; then
    # Redirect to bootstrap script
    if [ "$INSTANCE_BOOTSTRAP" == "1" ]; then
        ( exec /var/vcap/jobs/ansible-hooks/bin/postdeploy-bootstrap ) &
    else
        ( exec /var/vcap/jobs/ansible-hooks/bin/postdeploy-nonbootstrap ) &
    fi
    XBOOTSTRAP_PID=$!
    wait $XBOOTSTRAP_PID 2>/dev/null
    XBOOTSTRAP_RVALUE=$?
    [ "$XBOOTSTRAP_RVALUE" != "0" ] && exit $XBOOTSTRAP_RVALUE
fi

# if post-start scripts are disable, exit
[ "$JOB_POSTDEPLOY" == "0" ] && exit 0

# Setup env vars and folders for the ctl script
source /var/vcap/jobs/ansible-hooks/packages/ansible/_helpers/setup.sh "ansible-hooks"
# Load ansible environment variables. You can predefine the
# ANSIBLE_CONFIG variable to point to your own custom configuration
source /var/vcap/jobs/ansible-hooks/data/env.sh
# Load function lib (alway before setup, there are some global variables needed)
source /var/vcap/jobs/ansible-hooks/packages/ansible/_helpers/lib.sh

# Load python library path for dynamic libs
ldconf "$LD_LIBRARY_PATH"

# Run!
JOB_TYPE="${0##*/}"
run_all "$JOB_BASE_DIR" "$JOB_TYPE" "$JOB_POSTDEPLOY_NAME"
exit $?

