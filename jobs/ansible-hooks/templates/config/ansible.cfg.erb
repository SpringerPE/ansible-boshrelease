# config file for ansible -- http://ansible.com/
# ==============================================

# nearly all parameters can be overridden in ansible-playbook
# or with command line flags. ansible will read ANSIBLE_CONFIG,
# ansible.cfg in the current working directory, .ansible.cfg in
# the home directory or /etc/ansible/ansible.cfg, whichever it
# finds first

[defaults]
log_path = /var/vcap/sys/log/ansible-hooks/ansible.log
inventory = /var/vcap/jobs/ansible-hooks/config/inventory
local_tmp = /var/vcap/sys/tmp/ansible-hooks/tmp

# additional paths to search for roles in, colon separated
roles_path = /var/vcap/jobs/ansible-hooks/packages/ansible/roles
library = /var/vcap/jobs/ansible-hooks/packages/ansible/library

# set plugin path directories here, separate with colons
action_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/action
cache_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/cache
callback_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/callback
connection_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/connection
lookup_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/lookup
inventory_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/inventory
vars_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/vars
filter_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/filter
test_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/test
strategy_plugins = /var/vcap/jobs/ansible-hooks/packages/ansible/plugins/strategy

<% if_p("ansible.private_key") do %>
# If set, always use this private key file for authentication, same as
# if passing --private-key to ansible or ansible-playbook
private_key_file = /var/vcap/jobs/ansible-hooks/config/private.key
<% end %>

<% if_p("ansible.vault_password") do %>
# If set, configures the path to the Vault password file as an alternative to
# specifying --vault-password-file on the command line.
vault_password_file = /var/vcap/jobs/ansible-hooks/config/vault.pass
<% end %>

# Default user to use for playbooks if user is not specified
# (/usr/bin/ansible will use current user as default)
remote_user = <%= p("ansible.remote_user", "root") %>
remote_tmp = <%= p("ansible.remote_tmp", "$HOME/.ansible/tmp") %>
remote_port = <%= p("ansible.remote_port", "22") %>
# change this for alternative sudo implementations
sudo_exe = <%= p("ansible.become_method", "sudo") %>
sudo_user = <%= p("ansible.become_user", "root") %>
sudo_flags = -H -S -n
# use this shell for commands executed under sudo
# you may need to change this to bin/bash in rare instances
# if sudo is constrained
executable = <%= p("ansible.command_executable", "/bin/sh") %>
ask_sudo_pass = False

# Connection settings
transport = <%= p("ansible.transport", "smart") %>
timeout = 10
forks = <%= p("ansible.forks", "5") %>
internal_poll_interval = <%= p("ansible.internal_poll_interval", "0.001") %>
poll_interval = 15
ask_pass = False
ask_vault_pass = False
# Uncomment this to disable SSH key host checking
host_key_checking = <%= p("ansible.host_key_checking", "True") %>

# default module name for /usr/bin/ansible
module_name = command
module_lang = C
module_set_locale = <%= p("ansible.module_set_locale", "True") %>


# Determine whether includes in tasks and handlers are "static" by
# default. As of 2.0, includes are dynamic by default. Setting these
# values to True will make includes behave more like they did in the
# 1.x versions.
task_includes_static = <%= p("ansible.includes_static", "False") %>
handler_includes_static = <%= p("ansible.includes_static", "False") %>

# This option causes notified handlers to run on a host even if a 
# failure occurs on that host
force_handlers = <%= p("ansible.force_handlers", "True") %>

# Controls if a missing handler for a notification event is an error or a warning
error_on_missing_handler = True

# if inventory variables overlap, does the higher precedence one win
# or are hash values merged together?  The default is 'replace' but
# this can also be set to 'merge'.
hash_behaviour = <%= p("ansible.hash_behaviour", "replace") %>

# By default, variables from roles will be visible in the global variable
# scope. To prevent this, the following option can be enabled, and only
# tasks and handlers within the role will see the variables there
private_role_vars = <%= p("ansible.private_role_vars", "False") %>

# format of string {{ ansible_managed }} available within Jinja2
# templates indicates to users editing templates files will be replaced.
# replacing {file}, {host} and {uid} and strftime codes with proper values.
#ansible_managed = Ansible managed: {file} modified on %Y-%m-%d %H:%M:%S by {uid} on {host}
# {file}, {host}, {uid}, and the timestamp can all interfere with idempotence
# in some situations so the default is a static string:
ansible_managed = <%= p("ansible.ansible_managed", "Ansible managed") %>

# By default, ansible-playbook will display "Skipping [host]" if it determines a task
# should not be run on a host.  Set this to "False" if you don't want to see these "Skipping"
# messages. NOTE: the task header will still be shown regardless of whether or not the
# task is skipped.
display_skipped_hosts = <%= p("ansible.display_skipped_hosts", "True") %>

# By default, if a task in a playbook does not include a name: field then
# ansible-playbook will construct a header that includes the task's action but
# not the task's args.  This is a security feature because ansible cannot know
# if the *module* considers an argument to be no_log at the time that the
# header is printed.  If your environment doesn't have a problem securing
# stdout from ansible-playbook (or you have manually specified no_log in your
# playbook on all of the tasks where you have secret information) then you can
# safely set this to True to get more informative messages.
display_args_to_stdout = <%= p("ansible.display_args_to_stdout", "False") %>

# prevents logging of task data, off by default
#no_log = False

# by default (as of 1.3), Ansible will raise errors when attempting to dereference
# Jinja2 variables that are not set in templates or action lines. Uncomment this line
# to revert the behavior to pre-1.3.
error_on_undefined_vars = True

# by default (as of 1.6), Ansible may display warnings based on the configuration of the
# system running ansible itself. This may include warnings about 3rd party packages or
# other conditions that should be resolved if possible.
# to disable these warnings, set the following value to False:
system_warnings = True

# by default (as of 1.4), Ansible may display deprecation warnings for language
# features that should no longer be used and will be removed in future versions.
# to disable these warnings, set the following value to False:
deprecation_warnings = True

# (as of 1.8), Ansible can optionally warn when usage of the shell and
# command module appear to be simplified by using a default Ansible module
# instead.  These warnings can be silenced by adjusting the following
# setting or adding warn=yes or warn=no to the end of the command line
# parameter string.  This will for example suggest using the git module
# instead of shelling out to the git command.
command_warnings = False

# don't like cows?  that's unfortunate.
# set to 1 if you don't want cowsay support or export ANSIBLE_NOCOWS=1
nocows = 1

# don't like colors either?
# set to 1 if you don't want colors, or export ANSIBLE_NOCOLOR=1
nocolor = 1

# if set to a persistent type (not 'memory', for example 'redis') fact values
# from previous runs in Ansible will be stored.  This may be useful when
# wanting to use, for example, IP information from one group of servers
# without having to talk to them in the same playbook run to get their
# current IP information.
fact_caching = memory

# retry files
# When a playbook fails by default a .retry file will be created in ~/
# You can disable this feature by setting retry_files_enabled to False
# and you can change the location of the files by setting retry_files_save_path
retry_files_enabled = False

# Plays will gather facts by default, which contain information about
# the remote system.
#
# smart - gather by default, but don't regather if already gathered
# implicit - gather by default, turn off with gather_facts: False
# explicit - do not gather by default, must say gather_facts: True
gathering = <%= p("ansible.gathering", "smart") %>

# This only affects the gathering done by a play's gather_facts directive,
# by default gathering retrieves all facts subsets
# all - gather all subsets
# network - gather min and network facts
# hardware - gather hardware facts (longest facts to retrieve)
# virtual - gather min and virtual facts
# facter - import facts from facter
# ohai - import facts from ohai
# You can combine them using comma (ex: network,virtual)
# You can negate them using ! (ex: !hardware,!facter,!ohai)
# A minimal set of facts is always gathered.
gather_subset = <%= p("ansible.gather_subset", "all") %>

# some hardware related facts are collected
# with a maximum timeout of 10 seconds. This
# option lets you increase or decrease that
# timeout to something more suitable for the
# environment. 
# gather_timeout = 10

# change the default callback
stdout_callback = skippy
# enable additional callbacks
callback_whitelist = <%= p("ansible.callback_whitelist", "timer,mail") %>

# by default callbacks are not loaded for /bin/ansible, enable this if you
# want, for example, a notification or logging callback to also apply to
# /bin/ansible runs
bin_ansible_callbacks = True

# squash actions
# Ansible can optimise actions that call modules with list parameters
# when looping. Instead of calling the module once per with_ item, the
# module is called once with all items at once. Currently this only works
# under limited circumstances, and only with parameters named 'name'.
#squash_actions = apk,apt,dnf,homebrew,package,pacman,pkgng,yum,zypper

# Prevents logging of tasks, but only on the targets, data is still logged on the master/controller
no_target_syslog = <%= p("ansible.no_target_syslog", "False") %>

# controls whether Ansible will raise an error or warning if a task has no
# choice but to create world readable temporary files to execute a module on
# the remote machine.  This option is False by default for security.  Users may
# turn this on to have behaviour more like Ansible prior to 2.1.x.  See
# https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user
# for more secure ways to fix this than enabling this option.
allow_world_readable_tmpfiles = <%= p("ansible.allow_world_readable_tmpfiles", "False") %>

# controls the compression level of variables sent to
# worker processes. At the default of 0, no compression
# is used. This value must be an integer from 0 to 9.
#var_compression_level = 9

# controls what compression method is used for new-style ansible modules when
# they are sent to the remote system.  The compression types depend on having
# support compiled into both the controller's python and the client's python.
# The names should match with the python Zipfile compression types:
# * ZIP_STORED (no compression. available everywhere)
# * ZIP_DEFLATED (uses zlib, the default)
# These values may be set per host via the ansible_module_compression inventory
# variable
#module_compression = 'ZIP_DEFLATED'

# This controls the cutoff point (in bytes) on --diff for files
# set to 0 for unlimited (RAM may suffer!).
#max_diff_size = 1048576

# This controls how ansible handles multiple --tags and --skip-tags arguments
# on the CLI.  If this is True then multiple arguments are merged together.  If
# it is False, then the last specified argument is used and the others are ignored.
#merge_multiple_cli_flags = False

# list any Jinja2 extensions to enable here:
#jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n


[privilege_escalation]
become = True
become_method = <%= p("ansible.become_method", "sudo") %>
become_user = <%= p("ansible.become_user", "root") %>
become_ask_pass = False


[paramiko_connection]
# uncomment this line to cause the paramiko connection plugin to not record new host
# keys encountered.  Increases performance on new host additions.  Setting works independently of the
# host key checking setting above.
record_host_keys = <%= p("ansible.host_key_checking", "True") %>

# Use an OpenSSH like ProxyCommand for proxying all Paramiko SSH connections
# through a bastion or jump host.
<% if_p("ansible.ssh_proxy_host") do |proxy| %>
proxy_command = ssh -W "%h:%p" <%= proxy %>
<% end %>


[ssh_connection]

# ssh arguments to use
# Leaving off ControlPersist will result in poor performance, so use
# paramiko on older platforms rather than removing it, -C controls compression use
# ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s
<% if_p("ansible.ssh_connection_args") do |args| %>
ssh_args = <%= args %>
<% end %>

# This is the location of the ssh binary. It defaults to ssh which will use
# the first ssh binary available in $PATH
<% if_p("ansible.ssh_executable") do |ssh| %>
ssh_executable = "<%= ssh %>"
<% end %>

# The base directory for the ControlPath sockets. 
# This is the "%(directory)s" in the control_path option
# 
# Example: 
# control_path_dir = /tmp/.ansible/cp
# control_path_dir = $HOME/.ansible/cp
control_path_dir = /var/vcap/sys/tmp/ansible-hooks/cp

# The path to use for the ControlPath sockets. This defaults to
# "%(directory)s/ansible-ssh-%%h-%%p-%%r", however on some systems with
# very long hostnames or very long path names (caused by long user names or
# deeply nested home directories) this can exceed the character limit on
# file socket names (108 characters for most platforms). In that case, you
# may wish to shorten the string below.
control_path = %(directory)s/%%h-%%r

# Enabling pipelining reduces the number of SSH operations required to
# execute a module on the remote server. This can result in a significant
# performance improvement when enabled, however when using "sudo:" you must
# first disable 'requiretty' in /etc/sudoers
#
# By default, this option is disabled to preserve compatibility with
# sudoers configurations that have requiretty (the default on many distros).
pipelining = <%= p("ansible.ssh_connection_pipelining", "False") %>

# Control the mechanism for transfering files
#   * smart = try sftp and then try scp [default]
#   * True = use scp only
#   * False = use sftp only
scp_if_ssh = smart

# if False, sftp will not use batch mode to transfer files. This may cause some
# types of file transfer failures impossible to catch however, and should
# only be disabled if your sftp version has problems with batch mode
#sftp_batch_mode = False


[selinux]
# file systems that require special treatment when dealing with security context
# the default behaviour that copies the existing context or uses the user default
# needs to be changed to use the file system dependent context.
#special_context_filesystems=nfs,vboxsf,fuse,ramfs

# Set this to yes to allow libvirt_lxc connections to work without SELinux.
#libvirt_lxc_noseclabel = yes


